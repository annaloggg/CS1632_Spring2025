package edu.pitt.cs;

import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.generator.*;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import static org.junit.Assume.*;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

@RunWith(JUnitQuickcheck.class)
public class QuickCheckTest {

	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10 and x <= 10.
	 * Execution steps: Call IntegerOps.square(x).
	 * Invariants: Return value of call is always positive
	 * 			   Return value of call is 
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 */
	
	@Property(trials = 1000)
	public void testSquare(@InRange(minInt = -10, maxInt = 10) int x) {
		int res = IntegerOps.square(x);
		assertThat(res, is(equalTo(x * x)));
		assertThat(res, is(greaterThanOrEqualTo(0)));
	}
	
	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10, x <= 10, y >= -10, and y <= 10.
	 * Execution steps: Call IntegerOps.add(x, y).
	 * Invariants: result cannot be less than -20 or greater than 20
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 * @param y int generated by QuickCheck
	 */
	
	@Property
	public void testAdd(@InRange(minInt = -10, maxInt = 10) int x, @InRange(minInt = -10, maxInt = 10) int y) {
		int res = IntegerOps.add(x, y);
		assertThat(res, is(lessThanOrEqualTo(20)));
		assertThat(res, is(greaterThanOrEqualTo(-20)));
	}

	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10, x <= 10, y >= -10, y <= 10, AND x > -y.
	 * Execution steps: Call IntegerOps.add(x, y).
	 * Invariants: x != -y, 
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 * @param y int generated by QuickCheck
	 */
	
	// Write @Property testAddGreaterThan and see if you can find additional invariants with the addition x > -y precondition.
	// Use the assumeThat API to enforce the x > -y precondition.
	@Property
	public void testAddGreaterThan(@InRange(minInt = -10, maxInt = 10) int x, @InRange(minInt = -10, maxInt = 10) int y) {
		assumeThat(x, is(greaterThan(-y)));
		int res = IntegerOps.add(x, y);
		assertThat(y, is(not(equalTo(-10))));
		assertThat(res, is(not(equalTo(0))));

	}
}